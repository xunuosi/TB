package io.github.xunuosi.tb.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import io.github.xunuosi.tb.model.bean.Player;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_player".
*/
public class PlayerDao extends AbstractDao<Player, Long> {

    public static final String TABLENAME = "tb_player";

    /**
     * Properties of entity Player.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Avator_url = new Property(1, String.class, "avator_url", false, "AVATOR_URL");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Num = new Property(4, int.class, "num", false, "NUM");
        public final static Property TeamId = new Property(5, int.class, "teamId", false, "TEAM_ID");
        public final static Property TeamName = new Property(6, String.class, "teamName", false, "TEAM_NAME");
        public final static Property CardNum = new Property(7, String.class, "cardNum", false, "CARD_NUM");
        public final static Property Position = new Property(8, String.class, "position", false, "POSITION");
    }


    public PlayerDao(DaoConfig config) {
        super(config);
    }
    
    public PlayerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_player\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AVATOR_URL\" TEXT," + // 1: avator_url
                "\"SEX\" TEXT," + // 2: sex
                "\"NAME\" TEXT," + // 3: name
                "\"NUM\" INTEGER NOT NULL ," + // 4: num
                "\"TEAM_ID\" INTEGER NOT NULL ," + // 5: teamId
                "\"TEAM_NAME\" TEXT," + // 6: teamName
                "\"CARD_NUM\" TEXT," + // 7: cardNum
                "\"POSITION\" TEXT);"); // 8: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_player\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Player entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String avator_url = entity.getAvator_url();
        if (avator_url != null) {
            stmt.bindString(2, avator_url);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getNum());
        stmt.bindLong(6, entity.getTeamId());
 
        String teamName = entity.getTeamName();
        if (teamName != null) {
            stmt.bindString(7, teamName);
        }
 
        String cardNum = entity.getCardNum();
        if (cardNum != null) {
            stmt.bindString(8, cardNum);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(9, position);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Player entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String avator_url = entity.getAvator_url();
        if (avator_url != null) {
            stmt.bindString(2, avator_url);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getNum());
        stmt.bindLong(6, entity.getTeamId());
 
        String teamName = entity.getTeamName();
        if (teamName != null) {
            stmt.bindString(7, teamName);
        }
 
        String cardNum = entity.getCardNum();
        if (cardNum != null) {
            stmt.bindString(8, cardNum);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(9, position);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Player readEntity(Cursor cursor, int offset) {
        Player entity = new Player( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avator_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // num
            cursor.getInt(offset + 5), // teamId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // teamName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cardNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // position
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Player entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvator_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNum(cursor.getInt(offset + 4));
        entity.setTeamId(cursor.getInt(offset + 5));
        entity.setTeamName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCardNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPosition(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Player entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Player entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Player entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
